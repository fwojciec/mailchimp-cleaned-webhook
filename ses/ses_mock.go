// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ses

import (
	"sync"
)

var (
	lockSenderMockSend sync.RWMutex
)

// Ensure, that SenderMock does implement Sender.
// If this is not the case, regenerate this file with moq.
var _ Sender = &SenderMock{}

// SenderMock is a mock implementation of Sender.
//
//     func TestSomethingThatUsesSender(t *testing.T) {
//
//         // make and configure a mocked Sender
//         mockedSender := &SenderMock{
//             SendFunc: func(toEmail string, body string, subject string) error {
// 	               panic("mock out the Send method")
//             },
//         }
//
//         // use mockedSender in code that requires Sender
//         // and then make assertions.
//
//     }
type SenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(toEmail string, body string, subject string) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// ToEmail is the toEmail argument value.
			ToEmail string
			// Body is the body argument value.
			Body string
			// Subject is the subject argument value.
			Subject string
		}
	}
}

// Send calls SendFunc.
func (mock *SenderMock) Send(toEmail string, body string, subject string) error {
	if mock.SendFunc == nil {
		panic("SenderMock.SendFunc: method is nil but Sender.Send was just called")
	}
	callInfo := struct {
		ToEmail string
		Body    string
		Subject string
	}{
		ToEmail: toEmail,
		Body:    body,
		Subject: subject,
	}
	lockSenderMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	lockSenderMockSend.Unlock()
	return mock.SendFunc(toEmail, body, subject)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedSender.SendCalls())
func (mock *SenderMock) SendCalls() []struct {
	ToEmail string
	Body    string
	Subject string
} {
	var calls []struct {
		ToEmail string
		Body    string
		Subject string
	}
	lockSenderMockSend.RLock()
	calls = mock.calls.Send
	lockSenderMockSend.RUnlock()
	return calls
}
